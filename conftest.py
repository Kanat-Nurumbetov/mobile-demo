import pytest
import logging
import os
import time
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –±—É–¥—É—Ç –±—Ä–∞—Ç—å—Å—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")

from pages.login_page import LoginPage
from pages.otp_page import OtpPage
from pages.permissions_page import PermissionsPage
from pages.pin_page import PinPage
from utils.qr_generator import make_qr
from data.qr_payloads import QR_PAYLOADS
from config.settings import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('test.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

@pytest.fixture(scope="function")
def driver(request):
    # BrowserStack SDK —Å–∞–º —Å–æ–∑–¥–∞–µ—Ç –¥—Ä–∞–π–≤–µ—Ä –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –µ–≥–æ –∫–∞–∫ —Ñ–∏–∫—Å—Ç—É—Ä—É
    return request.getfixturevalue("bs_driver") if "bs_driver" in request.fixturenames else None

@pytest.fixture
def qr_image(request, tmp_path, driver):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞"""
    distr = request.param
    payload_info = QR_PAYLOADS[distr]
    unique_filename = f"{payload_info['file_name']}"
    local_file = tmp_path / unique_filename
    make_qr(payload_info["text"], local_file)
    return str(local_file)


@pytest.hookimpl(tryfirst=True, hookwrapper=True)
def pytest_runtest_makereport(item, call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
    outcome = yield
    report = outcome.get_result()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è BrowserStack
    if call.when == "call":
        driver = getattr(item, "funcargs", {}).get("driver", None)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        if report.failed and SCREENSHOT_ON_FAILURE and driver:
            try:
                SCREENSHOTS_DIR.mkdir(exist_ok=True)

                mode_suffix = f"_{driver.test_mode}" if hasattr(driver, 'test_mode') else ""
                screenshot_name = f"{item.name}_failed_{int(time.time())}{mode_suffix}.png"
                screenshot_path = SCREENSHOTS_DIR / screenshot_name

                driver.save_screenshot(str(screenshot_path))
                logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")

            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: {e}")


@pytest.fixture(autouse=True)
def test_lifecycle(request):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–µ—Å—Ç–æ–≤"""
    test_name = request.node.name
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        driver = request.getfixturevalue('driver') if 'driver' in request.fixturenames else None
        mode_info = f" ({driver.test_mode})" if driver and hasattr(driver, 'test_mode') else ""
    except:
        mode_info = ""

    logger.info(f"‚ñ∂Ô∏è –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢: {test_name}{mode_info}")
    start_time = time.time()

    yield

    duration = time.time() - start_time
    logger.info(f"‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù: {test_name}{mode_info} (–∑–∞ {duration:.2f}—Å)")

def pytest_configure(config):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest"""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ä—ã
    markers = [
        "smoke: –±—ã—Å—Ç—Ä—ã–µ smoke —Ç–µ—Å—Ç—ã",
        "qr_payment: —Ç–µ—Å—Ç—ã QR –ø–ª–∞—Ç–µ–∂–µ–π", 
        "od_navigation: —Ç–µ—Å—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ Online Duken",
        "browserstack: —Ç–µ—Å—Ç—ã –¥–ª—è BrowserStack",
        "local: —Ç–µ—Å—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞",
        "regression: —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"
    ]
    
    for marker in markers:
        config.addinivalue_line("markers", marker)

def pytest_collection_modifyitems(config, items):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –ø–æ —Ä–µ–∂–∏–º—É"""
    test_mode = os.getenv("TEST_MODE", TEST_MODE)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    for item in items:
        if test_mode == "browserstack":
            item.add_marker(pytest.mark.browserstack)
        else:
            item.add_marker(pytest.mark.local)