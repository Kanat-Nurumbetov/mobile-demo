import pytest
import logging
import os
import time
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –±—É–¥—É—Ç –±—Ä–∞—Ç—å—Å—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")

from utils.driver_factory import DriverFactory
from pages.login_page import LoginPage
from pages.otp_page import OtpPage
from pages.permissions_page import PermissionsPage
from pages.pin_page import PinPage
from utils.qr_generator import make_qr
from data.qr_payloads import QR_PAYLOADS
from config.settings import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('test.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

@pytest.fixture(scope="session")
def test_mode():
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    return os.getenv("TEST_MODE", TEST_MODE)

@pytest.fixture(scope="function")
def driver(test_mode):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞ (–ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–ª–∏ BrowserStack)"""
    logger.info(f"üöÄ –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä –≤ —Ä–µ–∂–∏–º–µ: {test_mode}")
    
    driver_instance, helper = DriverFactory.create_driver(test_mode)
    
    if not driver_instance:
        pytest.fail(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä –≤ —Ä–µ–∂–∏–º–µ: {test_mode}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∫ –¥—Ä–∞–π–≤–µ—Ä—É
    driver_instance.browserstack_helper = helper
    driver_instance.test_mode = test_mode
    driver_instance.implicitly_wait(DEFAULT_TIMEOUT)
    
    yield driver_instance
    
    # Cleanup
    try:
        logger.info("üßπ –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä...")
        driver_instance.quit()
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")

@pytest.fixture(scope="function")
def login(driver):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    mode_suffix = f"_{driver.test_mode}"
    logger.info(f"üîê –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é ({driver.test_mode})...")
    
    try:
        SCREENSHOTS_DIR.mkdir(exist_ok=True)
        
        # –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
        driver.save_screenshot(str(SCREENSHOTS_DIR / f"login_start{mode_suffix}.png"))

        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        login_page = LoginPage(driver)
        login_page.enter_phone(TEST_PHONE)
        driver.save_screenshot(str(SCREENSHOTS_DIR / f"phone_entered{mode_suffix}.png"))

        login_page.click_login()
        driver.save_screenshot(str(SCREENSHOTS_DIR / f"login_clicked{mode_suffix}.png"))

        # OTP
        otp_page = OtpPage(driver)
        otp_page.enter_otp(TEST_OTP)
        driver.save_screenshot(str(SCREENSHOTS_DIR / f"otp_entered{mode_suffix}.png"))

        # PIN
        pin_page = PinPage(driver)
        pin_page.wait_for_pin_screen()
        pin_page.enter_pin(TEST_PIN)
        driver.save_screenshot(str(SCREENSHOTS_DIR / f"first_pin{mode_suffix}.png"))

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ PIN
        pin_page.enter_pin(TEST_PIN)
        driver.save_screenshot(str(SCREENSHOTS_DIR / f"second_pin{mode_suffix}.png"))

        # –†–∞–∑—Ä–µ—à–µ–Ω–∏—è
        permissions_page = PermissionsPage(driver)
        permissions_page.click_next()
        driver.save_screenshot(str(SCREENSHOTS_DIR / f"permissions{mode_suffix}.png"))

        # –û—Ç–º–µ—á–∞–µ–º —É—Å–ø–µ—Ö –≤ BrowserStack
        if hasattr(driver, 'browserstack_helper') and driver.browserstack_helper:
            driver.browserstack_helper.mark_test_status(
                driver, "passed", "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
            )

        logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ ({driver.test_mode})")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        
        # –°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏
        error_screenshot = SCREENSHOTS_DIR / f"login_error{mode_suffix}_{int(time.time())}.png"
        driver.save_screenshot(str(error_screenshot))
        
        # –û—Ç–º–µ—á–∞–µ–º –æ—à–∏–±–∫—É –≤ BrowserStack
        if hasattr(driver, 'browserstack_helper') and driver.browserstack_helper:
            driver.browserstack_helper.mark_test_status(
                driver, "failed", f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
            )
        
        pytest.fail(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è: {e}")

@pytest.fixture
def qr_image(request, tmp_path, driver):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞"""
    distr = request.param
    payload_info = QR_PAYLOADS[distr]
    
    mode_suffix = f"_{driver.test_mode}"
    logger.info(f"üì± –°–æ–∑–¥–∞–µ–º QR –¥–ª—è –¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä–∞: {distr} ({driver.test_mode})")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    worker_id = getattr(request.config, 'workerinput', {}).get('workerid', 'master')
    unique_filename = f"{worker_id}_{payload_info['file_name']}{mode_suffix}.png"

    # –°–æ–∑–¥–∞–µ–º QR –ª–æ–∫–∞–ª—å–Ω–æ
    local_file = tmp_path / unique_filename
    make_qr(payload_info["text"], local_file)

    if driver.test_mode == "browserstack":
        # –î–ª—è BrowserStack –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        logger.info(f"üì± QR —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è BrowserStack: {local_file}")
        return str(local_file)
    else:
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        device_file = f"/sdcard/Download/{unique_filename}"
        
        os.system("adb shell mkdir -p /sdcard/Download/")
        result = os.system(f"adb push '{local_file}' '{device_file}'")
        
        if result != 0:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ QR —Ñ–∞–π–ª–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å QR —Ñ–∞–π–ª")

        logger.info(f"‚úÖ QR —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_file}")
        return device_file


@pytest.hookimpl(tryfirst=True, hookwrapper=True)
def pytest_runtest_makereport(item, call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
    outcome = yield
    report = outcome.get_result()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è BrowserStack
    if call.when == "call":
        driver = getattr(item, "funcargs", {}).get("driver", None)

        if driver and hasattr(driver, 'browserstack_helper') and driver.browserstack_helper:
            if call.excinfo is None:  # –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª
                driver.browserstack_helper.mark_test_status(
                    driver, "passed", f"–¢–µ—Å—Ç {item.name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
                )
            else:  # –¢–µ—Å—Ç —É–ø–∞–ª
                error_msg = str(call.excinfo.value) if call.excinfo.value else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                driver.browserstack_helper.mark_test_status(
                    driver, "failed", f"–¢–µ—Å—Ç {item.name}: {error_msg}"
                )

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        if report.failed and SCREENSHOT_ON_FAILURE and driver:
            try:
                SCREENSHOTS_DIR.mkdir(exist_ok=True)

                mode_suffix = f"_{driver.test_mode}" if hasattr(driver, 'test_mode') else ""
                screenshot_name = f"{item.name}_failed_{int(time.time())}{mode_suffix}.png"
                screenshot_path = SCREENSHOTS_DIR / screenshot_name

                driver.save_screenshot(str(screenshot_path))
                logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")

            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: {e}")


@pytest.fixture(autouse=True)
def test_lifecycle(request):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–µ—Å—Ç–æ–≤"""
    test_name = request.node.name
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        driver = request.getfixturevalue('driver') if 'driver' in request.fixturenames else None
        mode_info = f" ({driver.test_mode})" if driver and hasattr(driver, 'test_mode') else ""
    except:
        mode_info = ""

    logger.info(f"‚ñ∂Ô∏è –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢: {test_name}{mode_info}")
    start_time = time.time()

    yield

    duration = time.time() - start_time
    logger.info(f"‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù: {test_name}{mode_info} (–∑–∞ {duration:.2f}—Å)")

def pytest_configure(config):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest"""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ä—ã
    markers = [
        "smoke: –±—ã—Å—Ç—Ä—ã–µ smoke —Ç–µ—Å—Ç—ã",
        "qr_payment: —Ç–µ—Å—Ç—ã QR –ø–ª–∞—Ç–µ–∂–µ–π", 
        "od_navigation: —Ç–µ—Å—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ Online Duken",
        "browserstack: —Ç–µ—Å—Ç—ã –¥–ª—è BrowserStack",
        "local: —Ç–µ—Å—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞",
        "regression: —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"
    ]
    
    for marker in markers:
        config.addinivalue_line("markers", marker)

def pytest_collection_modifyitems(config, items):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –ø–æ —Ä–µ–∂–∏–º—É"""
    test_mode = os.getenv("TEST_MODE", TEST_MODE)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    for item in items:
        if test_mode == "browserstack":
            item.add_marker(pytest.mark.browserstack)
        else:
            item.add_marker(pytest.mark.local)