import pytest
import logging

logger = logging.getLogger(__name__)


class TestDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""

    def test_system_ready(self):
        """–¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        from config.settings import TEST_MODE, APP_PACKAGE
        from utils.qr_generator import make_qr
        from data.qr_payloads import QR_PAYLOADS
        
        logger.info(f"‚úÖ TEST_MODE: {TEST_MODE}")
        logger.info(f"‚úÖ APP_PACKAGE: {APP_PACKAGE}")
        logger.info(f"‚úÖ QR_PAYLOADS: {list(QR_PAYLOADS.keys())}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR –∫–æ–¥–∞
        import tempfile
        import os
        
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_file:
            make_qr("https://test.example.com", tmp_file.name)
            assert os.path.exists(tmp_file.name)
            os.unlink(tmp_file.name)
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

    @pytest.mark.smoke
    def test_browserstack_config(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ BrowserStack"""
        from config.settings import BROWSERSTACK_USERNAME, BROWSERSTACK_ACCESS_KEY
        
        logger.info("üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é BrowserStack...")
        
        if BROWSERSTACK_USERNAME and BROWSERSTACK_ACCESS_KEY:
            logger.info("‚úÖ BrowserStack —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            logger.info(f"Username: {BROWSERSTACK_USERNAME}")
            logger.info(f"Access Key: {'*' * len(BROWSERSTACK_ACCESS_KEY)}")
        else:
            logger.warning("‚ö†Ô∏è BrowserStack —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            pytest.skip("BrowserStack —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    def test_page_objects(self):
        """–¢–µ—Å—Ç Page Object Model"""
        logger.info("üìÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º Page Objects...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã Page Objects
        from pages.base_page import BasePage
        from pages.login_page import LoginPage
        from pages.qr_scaner_page import QrScanerPage
        from pages.payment_confirmation_page import PaymentConfirmationPage
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        assert BasePage is not None
        assert LoginPage is not None
        assert QrScanerPage is not None
        assert PaymentConfirmationPage is not None
        
        logger.info("‚úÖ –í—Å–µ Page Objects –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    def test_utils(self):
        """–¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç"""
        logger.info("üõ†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ç–∏–ª–∏—Ç—ã...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã —É—Ç–∏–ª–∏—Ç
        from utils.driver_factory import DriverFactory
        from utils.qr_generator import make_qr
        from utils.test_helpers import TestStep, wait_and_screenshot
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        assert DriverFactory is not None
        assert make_qr is not None
        assert TestStep is not None
        assert wait_and_screenshot is not None
        
        logger.info("‚úÖ –í—Å–µ —É—Ç–∏–ª–∏—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    def test_makefile_commands(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥ Makefile"""
        logger.info("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã Makefile...")
        
        import subprocess
        import os
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Makefile —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        makefile_path = "Makefile.execution"
        assert os.path.exists(makefile_path), "Makefile.execution –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
        try:
            result = subprocess.run(
                ["make", "-f", "Makefile.execution", "-n", "test-smoke"],
                capture_output=True,
                text=True
            )
            logger.info("‚úÖ Makefile –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Makefile: {e}")
        
        logger.info("‚úÖ Makefile –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")

    @pytest.mark.smoke
    def test_full_system_check(self):
        """–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.test_system_ready()
        self.test_page_objects()
        self.test_utils()
        self.test_makefile_commands()
        
        logger.info("üéâ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã
        logger.info("üìù –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        logger.info("  - make -f Makefile.execution test-smoke")
        logger.info("  - python3 -m pytest tests/test_simple.py -v")
        logger.info("  - TEST_MODE=browserstack python3 -m pytest tests/test_b2b.py -v") 