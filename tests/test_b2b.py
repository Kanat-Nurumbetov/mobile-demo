import pytest
import logging
from pages.main_page_ob import MainPage
from pages.od_main_page import OdMainPage
from pages.qr_scaner_page import QrScanerPage
from pages.payment_confirmation_page import PaymentConfirmationPage
from utils.test_helpers import TestStep, wait_and_screenshot

logger = logging.getLogger(__name__)


class TestQrPaymentBrowserStack:
    """–¢–µ—Å—Ç—ã QR —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è BrowserStack –∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""

    @TestStep("–ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ QR —Å–∫–∞–Ω–µ—Ä—É")
    def navigate_to_qr_scanner(self, driver):
        """–ü–µ—Ä–µ–π—Ç–∏ –∫ QR —Å–∫–∞–Ω–µ—Ä—É —á–µ—Ä–µ–∑ OD"""
        main = MainPage(driver)
        main.wait_for_main_page()
        main.dismiss_hint()
        main.dismiss_hint()

        wait_and_screenshot(driver, f"main_page_loaded")

        main.go_to_online_duken()
        wait_and_screenshot(driver, f"od_main_opened")

        od = OdMainPage(driver)

        assert od.select_qr_scaner(), "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å QR —Å–∫–∞–Ω–µ—Ä"
        wait_and_screenshot(driver, f"qr_scanner_opened")

        return od

    @pytest.mark.parametrize(
        "qr_image,device_name",
        [
            ("distrA", "samsung_s22"),
            ("distrB", "samsung_s22"),
            ("distrA", "pixel_6"),
            ("distrB", "pixel_6"),
        ],
        indirect=["qr_image"],
        ids=["Universal-Samsung", "Megapolis-Samsung", "Universal-Pixel", "Megapolis-Pixel"]
    )
    def test_full_qr_payment_flow_multidevice(self, driver, qr_image, device_name):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç QR –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö"""

        test_name = f"QR Payment Flow - {device_name}"
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")

        try:
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ QR —Å–∫–∞–Ω–µ—Ä—É
            self.navigate_to_qr_scanner(driver)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
            scanner = QrScanerPage(driver)
            confirmation = PaymentConfirmationPage(driver)

            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ QR —Å–∫–∞–Ω–µ—Ä–∞
            scanner.wait_for_qr_scanner()
            scanner.allow_camera_permission()

            # –û—Ç–∫—Ä—ã—Ç–∏–µ –≥–∞–ª–µ—Ä–µ–∏ –∏ –≤—ã–±–æ—Ä QR
            scanner.open_gallery()
            wait_and_screenshot(driver, f"gallery_opened_{device_name}")

            assert scanner.select_qr_from_gallery(qr_image), \
                "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏"
            wait_and_screenshot(driver, f"qr_image_selected_{device_name}")

            # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            assert scanner.wait_for_qr_scan_result(), \
                "QR –∫–æ–¥ –Ω–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω"
            wait_and_screenshot(driver, f"qr_scan_result_{device_name}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã
            assert scanner.is_payment_form_displayed(), \
                "–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ
            amount = scanner.get_payment_amount()
            recipient = scanner.get_recipient_info()

            logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ - –°—É–º–º–∞: {amount}, –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient}")

            # –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –æ–ø–ª–∞—Ç—ã
            assert scanner.click_pay_button(), \
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã"
            wait_and_screenshot(driver, f"payment_button_clicked_{device_name}")

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            confirmation.wait_for_confirmation_page()
            payment_info = confirmation.get_payment_info()

            logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {payment_info}")

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            assert confirmation.confirm_payment(), \
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂"
            wait_and_screenshot(driver, f"payment_confirmed_{device_name}")

            # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result = confirmation.wait_for_payment_result(timeout=30)

            if result == "success":
                transaction_id = confirmation.get_transaction_id()
                logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω! ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_id}")
                wait_and_screenshot(driver, f"payment_success_{device_name}")

            elif result == "error":
                error_msg = confirmation.get_error_message()
                logger.error(f"‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: {error_msg}")
                wait_and_screenshot(driver, f"payment_error_{device_name}")

                pytest.fail(f"–ü–ª–∞—Ç–µ–∂ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: {error_msg}")

            else:  # timeout
                wait_and_screenshot(driver, f"payment_timeout_{device_name}")

                pytest.fail("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")

            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏
            wait_and_screenshot(driver, f"test_error_{device_name}")

            raise

    @pytest.mark.parametrize(
        "qr_image",
        ["distrA", "distrB"],
        indirect=True,
        ids=["Universal-QR", "Megapolis-QR"]
    )
    def test_full_qr_payment_flow_universal(self, driver, qr_image):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç QR –ø–ª–∞—Ç–µ–∂–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ –∏ –≤ BrowserStack)"""

        test_name = f"QR Payment Flow - {driver.test_mode}"
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")

        try:
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ QR —Å–∫–∞–Ω–µ—Ä—É
            self.navigate_to_qr_scanner(driver)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
            scanner = QrScanerPage(driver)
            confirmation = PaymentConfirmationPage(driver)

            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ QR —Å–∫–∞–Ω–µ—Ä–∞
            scanner.wait_for_qr_scanner()
            scanner.allow_camera_permission()

            # –û—Ç–∫—Ä—ã—Ç–∏–µ –≥–∞–ª–µ—Ä–µ–∏ –∏ –≤—ã–±–æ—Ä QR
            scanner.open_gallery()
            wait_and_screenshot(driver, f"gallery_opened")

            assert scanner.select_qr_from_gallery(qr_image), \
                "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏"
            wait_and_screenshot(driver, f"qr_image_selected")

            # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            assert scanner.wait_for_qr_scan_result(), \
                "QR –∫–æ–¥ –Ω–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω"
            wait_and_screenshot(driver, f"qr_scan_result")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã
            assert scanner.is_payment_form_displayed(), \
                "–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ
            amount = scanner.get_payment_amount()
            recipient = scanner.get_recipient_info()

            logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ - –°—É–º–º–∞: {amount}, –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient}")

            # –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –æ–ø–ª–∞—Ç—ã
            assert scanner.click_pay_button(), \
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã"
            wait_and_screenshot(driver, f"payment_button_clicked")

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            confirmation.wait_for_confirmation_page()
            payment_info = confirmation.get_payment_info()

            logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {payment_info}")

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            assert confirmation.confirm_payment(), \
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂"
            wait_and_screenshot(driver, f"payment_confirmed")

            # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result = confirmation.wait_for_payment_result(timeout=30)

            if result == "success":
                transaction_id = confirmation.get_transaction_id()
                logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω! ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_id}")
                wait_and_screenshot(driver, f"payment_success")

            elif result == "error":
                error_msg = confirmation.get_error_message()
                logger.error(f"‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: {error_msg}")
                wait_and_screenshot(driver, f"payment_error")

                pytest.fail(f"–ü–ª–∞—Ç–µ–∂ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: {error_msg}")

            else:  # timeout
                wait_and_screenshot(driver, f"payment_timeout")

                pytest.fail("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")

            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏
            wait_and_screenshot(driver, f"test_error")

            raise

    @pytest.mark.smoke
    @pytest.mark.parametrize("device_name", ["samsung_s22", "pixel_6"])
    def test_qr_scanner_ui_elements_multidevice(self, driver, device_name):
        """Smoke test UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ QR —Å–∫–∞–Ω–µ—Ä–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö"""

        test_name = f"QR Scanner UI - {device_name}"
        logger.info(f"üîç –ó–∞–ø—É—Å–∫ smoke —Ç–µ—Å—Ç–∞: {test_name}")

        try:
            self.navigate_to_qr_scanner(driver)

            scanner = QrScanerPage(driver)
            scanner.wait_for_qr_scanner()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            assert scanner.is_element_present(scanner.QR_FRAME), \
                "QR —Ä–∞–º–∫–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"

            assert scanner.is_element_present(scanner.GALLERY_BUTTON), \
                "–ö–Ω–æ–ø–∫–∞ –≥–∞–ª–µ—Ä–µ–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"

            wait_and_screenshot(driver, f"qr_scanner_ui_{device_name}")

            logger.info(f"‚úÖ Smoke test UI –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ –Ω–∞ {device_name}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ smoke —Ç–µ—Å—Ç–µ: {e}")

            raise

    @pytest.mark.smoke
    def test_qr_scanner_ui_elements_universal(self, driver):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π smoke test UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ QR —Å–∫–∞–Ω–µ—Ä–∞"""

        test_name = f"QR Scanner UI - {driver.test_mode}"
        logger.info(f"üîç –ó–∞–ø—É—Å–∫ smoke —Ç–µ—Å—Ç–∞: {test_name}")

        try:
            self.navigate_to_qr_scanner(driver)

            scanner = QrScanerPage(driver)
            scanner.wait_for_qr_scanner()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            assert scanner.is_element_present(scanner.QR_FRAME), \
                "QR —Ä–∞–º–∫–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"

            assert scanner.is_element_present(scanner.GALLERY_BUTTON), \
                "–ö–Ω–æ–ø–∫–∞ –≥–∞–ª–µ—Ä–µ–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"

            wait_and_screenshot(driver, f"qr_scanner_ui")

            logger.info("‚úÖ Smoke test UI –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ smoke —Ç–µ—Å—Ç–µ: {e}")

            raise